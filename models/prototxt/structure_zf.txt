require set.	
Command line args:	
{
  snapshot : 1000
  seed : 0
  name : "output_mine/orig_80k_batch128_lr5_per_2k/imgnet"
  gpuid : 0
  lr : 0.0001
  restore : ""
  train : "data_mine/ILSVRC2015_VID_sampled_double.t7"
  threads : 2
  plot : 200
  rms_decay : 0.9
  cfg : "config/imagenet_test.lua"
  opti : "rmsprop"
  model : "models/zf.lua"
}
Options:	
{
  roi_pooling : 
    {
      kw : 6
      kh : 6
    }
  best_match : true
  batch_size : 128
  positive_threshold : 0.6
  nearby_aversion : true
  normalization : 
    {
      method : "contrastive"
      centering : true
      scaling : true
      width : 7
    }
  negative_threshold : 0.25
  target_smaller_side : 480
  scales : 
    {
      1 : 48
      2 : 96
      3 : 192
      4 : 384
    }
  class_count : 30
  max_pixel_size : 1000
  background_base_path : ""
  augmentation : 
    {
      aspect_jitter : 0
      hflip : 0.25
      vflip : 0
      random_scaling : 0
    }
  examples_base_path : ""
  color_space : "yuv"
}
Reading training data file 'data_mine/ILSVRC2015_VID_sampled_double.t7'.	
Training data loaded. Dataset: 'ILSVRC2015_VID'; Total files: 78133; classes: 30; Background: 0)	
	
model (printed by orig.lua)	
pnet module #1	
nn.Identity
pnet module #2	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> output]
  (1): nn.SpatialConvolution(3 -> 96, 7x7, 2,2, 3,3)
  (2): nn.PReLU
  (3): nn.SpatialCrossMapLRN
  (4): nn.SpatialMaxPooling(3x3, 2,2, 1,1)
}
pnet module #3	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
  (1): nn.SpatialConvolution(96 -> 256, 5x5, 2,2, 2,2)
  (2): nn.PReLU
  (3): nn.SpatialDropout(0.400000) -- not required
  (4): nn.SpatialCrossMapLRN
  (5): nn.SpatialMaxPooling(3x3, 2,2, 1,1)
}
pnet module #4	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
  (1): nn.SpatialConvolution(256 -> 384, 3x3, 1,1, 1,1)
  (2): nn.PReLU
  (3): nn.SpatialDropout(0.400000) -- not required
  (4): nn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1)
  (5): nn.PReLU
}
pnet module #5	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.SpatialConvolution(384 -> 256, 3x3)
  (2): nn.PReLU
  (3): nn.SpatialConvolution(256 -> 18, 1x1)
}
pnet module #6	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.SpatialConvolution(384 -> 256, 3x3, 1,1, 1,1)
  (2): nn.PReLU
  (3): nn.SpatialDropout(0.400000)
}
pnet module #7	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.SpatialConvolution(256 -> 256, 3x3)
  (2): nn.PReLU
  (3): nn.SpatialConvolution(256 -> 18, 1x1)
}
pnet module #8	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.SpatialConvolution(256 -> 256, 5x5)
  (2): nn.PReLU
  (3): nn.SpatialConvolution(256 -> 18, 1x1)
}
pnet module #9	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.SpatialConvolution(256 -> 256, 7x7)
  (2): nn.PReLU
  (3): nn.SpatialConvolution(256 -> 18, 1x1)
}

// Additional layers in Caffe model

Conv_proposal: num_output=256 / kernel=3 / pad=1 / stride=1
ReLU

Conv_proposal_cls_score: num_output=18 / kernel=1 / pad=1 / stride=1

Conv_proposal_bbox_pred: num_output=36 / kernel=1 / pad=0 / stride=1

// End of additional layers in Caffe model
	
cnet module #1	
nn.Identity
cnet module #2	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
  (1): nn.Linear(9216 -> 1024)
  (2): nn.BatchNormalization (2D) (1024)
  (3): nn.PReLU
  (4): nn.Dropout(0.500000)
  (5): nn.Linear(1024 -> 512)
  (6): nn.PReLU
  (7): nn.Dropout(0.500000)
}
cnet module #3	
nn.Linear(512 -> 4)
cnet module #4	
nn.Sequential {
  [input -> (1) -> (2) -> output]
  (1): nn.Linear(512 -> 31)
  (2): nn.LogSoftMax
}

	
(Anchors.lua) Localizer init #1	
tracing modules	
nn.SpatialConvolution(256 -> 18, 1x1)
nn.PReLU
nn.SpatialConvolution(384 -> 256, 3x3)
nn.PReLU
nn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(256 -> 384, 3x3, 1,1, 1,1)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(96 -> 256, 5x5, 2,2, 2,2)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.PReLU
nn.SpatialConvolution(3 -> 96, 7x7, 2,2, 3,3)
self.layers:	
#1: dH=2 / dW=2 / kH=7 / kW=7 / padH=3 / padW=3	
#2: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#3: dH=2 / dW=2 / kH=5 / kW=5 / padH=2 / padW=2	
#4: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#5: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#6: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#7: dH=1 / dW=1 / kH=3 / kW=3 / padH=0 / padW=0	
#8: dH=1 / dW=1 / kH=1 / kW=1 / padH=0 / padW=0	
(Anchors.lua) Localizer init #2	
tracing modules	
nn.SpatialConvolution(256 -> 18, 1x1)
nn.PReLU
nn.SpatialConvolution(256 -> 256, 3x3)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(384 -> 256, 3x3, 1,1, 1,1)
nn.PReLU
nn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(256 -> 384, 3x3, 1,1, 1,1)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(96 -> 256, 5x5, 2,2, 2,2)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.PReLU
nn.SpatialConvolution(3 -> 96, 7x7, 2,2, 3,3)
self.layers:	
#1: dH=2 / dW=2 / kH=7 / kW=7 / padH=3 / padW=3	
#2: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#3: dH=2 / dW=2 / kH=5 / kW=5 / padH=2 / padW=2	
#4: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#5: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#6: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#7: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#8: dH=1 / dW=1 / kH=3 / kW=3 / padH=0 / padW=0	
#9: dH=1 / dW=1 / kH=1 / kW=1 / padH=0 / padW=0	
(Anchors.lua) Localizer init #3	
tracing modules	
nn.SpatialConvolution(256 -> 18, 1x1)
nn.PReLU
nn.SpatialConvolution(256 -> 256, 5x5)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(384 -> 256, 3x3, 1,1, 1,1)
nn.PReLU
nn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(256 -> 384, 3x3, 1,1, 1,1)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(96 -> 256, 5x5, 2,2, 2,2)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.PReLU
nn.SpatialConvolution(3 -> 96, 7x7, 2,2, 3,3)
self.layers:	
#1: dH=2 / dW=2 / kH=7 / kW=7 / padH=3 / padW=3	
#2: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#3: dH=2 / dW=2 / kH=5 / kW=5 / padH=2 / padW=2	
#4: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#5: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#6: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#7: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#8: dH=1 / dW=1 / kH=5 / kW=5 / padH=0 / padW=0	
#9: dH=1 / dW=1 / kH=1 / kW=1 / padH=0 / padW=0	
(Anchors.lua) Localizer init #4	
tracing modules	
nn.SpatialConvolution(256 -> 18, 1x1)
nn.PReLU
nn.SpatialConvolution(256 -> 256, 7x7)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(384 -> 256, 3x3, 1,1, 1,1)
nn.PReLU
nn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(256 -> 384, 3x3, 1,1, 1,1)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(96 -> 256, 5x5, 2,2, 2,2)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.PReLU
nn.SpatialConvolution(3 -> 96, 7x7, 2,2, 3,3)
self.layers:	
#1: dH=2 / dW=2 / kH=7 / kW=7 / padH=3 / padW=3	
#2: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#3: dH=2 / dW=2 / kH=5 / kW=5 / padH=2 / padW=2	
#4: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#5: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#6: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#7: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#8: dH=1 / dW=1 / kH=7 / kW=7 / padH=0 / padW=0	
#9: dH=1 / dW=1 / kH=1 / kW=1 / padH=0 / padW=0	
tracing modules	
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(384 -> 256, 3x3, 1,1, 1,1)
nn.PReLU
nn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1)
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(256 -> 384, 3x3, 1,1, 1,1)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.SpatialDropout(0.400000)
nn.PReLU
nn.SpatialConvolution(96 -> 256, 5x5, 2,2, 2,2)
nn.SpatialMaxPooling(3x3, 2,2, 1,1)
nn.SpatialCrossMapLRN
nn.PReLU
nn.SpatialConvolution(3 -> 96, 7x7, 2,2, 3,3)
self.layers:	
#1: dH=2 / dW=2 / kH=7 / kW=7 / padH=3 / padW=3	
#2: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#3: dH=2 / dW=2 / kH=5 / kW=5 / padH=2 / padW=2	
#4: dH=2 / dW=2 / kH=3 / kW=3 / padH=1 / padW=1	
#5: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#6: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
#7: dH=1 / dW=1 / kH=3 / kW=3 / padH=1 / padW=1	
